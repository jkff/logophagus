interface Plugin {
	Overlay createUIOverlay();
}


Ctrl-F plugin.

When scrollable log table has focus, Ctrl-F pops up a text in its toolbar which acquires focus. When we type in that text field, the typed regex is highlighted in the log table and table is scrolled to the first occurence of the regex.

 - Key listeners of scrollable log table should be customizable (plugin should be able to add to them)
	 - Listener gets added at "plugin activation" (whatever that might mean)
 - Plugin should be able to add a component to the log table's toolbar (where bookmarks also live)
	 - This is an *action* bound to the listener
 - Typing causes a new highlighter to be added to the log table
	 - This is a keylistener of the search field

interface ExtensionPoint<T> {
	Disposable add(T);
	void addListener(Listener);
}

interface ExtensionPointKey<T> {
	string getName();
}

class ScrollableLogTable {
	public static final ExtensionPointKey KEY_LISTENER = new ExtensionPointKey<KeyListener>();
}


{					("KeyListener", JComponent.this)
	PluginManager.registerExtensionPoint(SLT.KEY_LISTENER, new ExtensionPoint<KeyListener>() {..this.addKeyListener(listener)..});
	PluginManager.registerExtensionPoint(SLT.TOOLBAR, new ExtensionPoint<ToolbarItem>() {
		add {
			myToolbar.add(item);
			return {myToolbar.remove(item);}
		}
	});
	// Var.2

	PluginManager.getExtensionPoint(SLT.TOOLBAR).addListener({rebuildToolbar(PM.getEP(...).getRegisteredComponents())}); 	

	same about highlighters
}

PluginManager.<KeyListener>getExtensionPoint(SLT.KEY_LISTENER).add(new KeyListener() {...});

interface Plugin {
	void activate(PluginManager pm);
	void deactivate();
}


Tree: has extension point "analysis plugins"
tree.analysisPlugins.add(new AnalysisPlugin() {
	PopupMenu getPopupOverlay(TreeContext context) {
		...
		if(context.getSelectedNode() == null) return new PopupMenu();
		else return new PopupMenu(new PopupItem("foo", new Action() {...}))
	}
})


PluginManager{

	Plugin getPlugin("plugin full name");

	ExtensionPoint getExtensionPoint("plugin full name", "extension point name");

}

Plugin {
	activate(PluginManager pm);
	deactivate();
}
